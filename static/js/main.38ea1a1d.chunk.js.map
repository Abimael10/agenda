{"version":3,"sources":["components/Form.js","components/Lista.js","components/Content.js","App.js","serviceWorker.js","index.js"],"names":["Form","crearLista","useState","evento","fecha","hora","detalles","agenda","manageEvent","error","manageError","handleChange","e","target","name","value","className","type","onChange","onClick","preventDefault","trim","id","shortid","Lista","lista","eliminarEvento","Content","listas","crearListas","estado","length","removerEvento","filter","map","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"0PAsGeA,EAnGF,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,WAAgB,EAEGC,mBAAS,CACnCC,OAAQ,GACRC,MAAO,GACPC,KAAM,GACNC,SAAU,KANa,mBAEpBC,EAFoB,KAEZC,EAFY,OASEN,oBAAS,GATX,mBASpBO,EAToB,KASbC,EATa,KAWrBC,EAAe,SAAAC,GACjBJ,EAAY,2BAAKD,GAAN,kBAAeK,EAAEC,OAAOC,KAAOF,EAAEC,OAAOE,UAIhDZ,EAAiCI,EAAjCJ,OAAQC,EAAyBG,EAAzBH,MAAOC,EAAkBE,EAAlBF,KAAMC,EAAYC,EAAZD,SA4B5B,OACI,yBAAKU,UAAU,YACX,wBAAIA,UAAU,qBAAd,gBAEEP,EAAQ,uBAAGO,UAAU,eAAb,mCAA8D,KAExE,8BACI,oDACA,2BACIC,KAAK,OACLH,KAAK,SACLE,UAAU,4BACVE,SAAUP,EACVI,MAAOZ,IAGX,yBAAKa,UAAU,YACX,2BAAOA,UAAU,SAAjB,SACA,2BACIC,KAAK,OACLH,KAAK,QACLE,UAAU,kCACVE,SAAUP,EACVI,MAAOX,IAGX,2BAAOY,UAAU,SAAjB,QACA,2BACIC,KAAK,OACLH,KAAK,OACLE,UAAU,4BACVE,SAAUP,EACVI,MAAOV,KAIf,sDACA,8BACIW,UAAU,4BACVF,KAAK,WACLI,SAAUP,EACVI,MAAOT,IAGX,4BACIW,KAAK,SACLD,UAAU,kBACVG,QAzEI,SAAAP,GAChBA,EAAEQ,iBAGmB,KAAlBjB,EAAOkB,QAAkC,KAAjBjB,EAAMiB,QAAiC,KAAhBhB,EAAKgB,QAAqC,KAApBf,EAASe,QAI7EX,GAAY,GAIhBH,EAAOe,GAAKC,MAGZtB,EAAWM,GAGXC,EAAY,CACRL,OAAQ,GACRC,MAAO,GACPC,KAAM,GACNC,SAAU,MAjBVI,GAAY,KAiER,cC3EDc,EAdD,SAAC,GAAD,IAAEC,EAAF,EAAEA,MAAOC,EAAT,EAASA,eAAT,OACV,yBAAKV,UAAU,SACX,iDAAsB,8BAAOS,EAAMtB,SACnC,qCAAU,8BAAOsB,EAAMrB,QACvB,oCAAS,8BAAOqB,EAAMpB,OACtB,wCAAa,8BAAOoB,EAAMnB,WAE1B,4BACIU,UAAU,MACVG,QAAS,kBAAMO,EAAeD,EAAMH,MAFxC,mBC6BOK,EAlCC,WAAO,IAAD,EAEYzB,mBAAS,IAFrB,mBAEX0B,EAFW,KAEHC,EAFG,KAQZC,EAA2B,IAAlBF,EAAOG,OAAe,0BAAyB,+BAExDL,EAAiB,SAAAJ,GACrB,IAAMU,EAAgBJ,EAAOK,QAAO,SAAAR,GAAK,OAAIA,EAAMH,KAAOA,KAC1DO,EAAYG,IAGd,OACI,yBAAKhB,UAAU,UACb,kBAAC,EAAD,CACEf,WAdW,SAAAwB,GACjBI,EAAY,GAAD,mBAAKD,GAAL,CAAaH,QAepB,yBAAKT,UAAU,YACb,wBAAIA,UAAU,qBAAqBc,GAClCF,EAAOM,KAAI,SAAAT,GAAK,OACb,kBAAC,EAAD,CACIU,IAAKV,EAAMH,GACXG,MAAOA,EACPC,eAAgBA,UCjBrBU,MAVf,WAEE,OACE,yBAAKpB,UAAU,OACX,sCACA,kBAAC,EAAD,QCIYqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA5C,GACL6C,QAAQ7C,MAAMA,EAAM8C,c","file":"static/js/main.38ea1a1d.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\nimport shortid from 'shortid'\r\n\r\nconst Form = ({crearLista}) => {\r\n\r\n    const [agenda, manageEvent] = useState({\r\n        evento: '',\r\n        fecha: '',\r\n        hora: '',\r\n        detalles: ''\r\n    })\r\n\r\n    const [error, manageError] = useState(false)\r\n\r\n    const handleChange = e => {\r\n        manageEvent({ ...agenda, [e.target.name]: e.target.value })\r\n    }\r\n\r\n    //Destruct\r\n    const {evento, fecha, hora, detalles} = agenda;\r\n\r\n    const submitEvent = e => {\r\n        e.preventDefault()\r\n\r\n        //Validation\r\n        if(evento.trim() === '' || fecha.trim() === '' || hora.trim() === '' || detalles.trim() === '') {\r\n            manageError(true)\r\n            return\r\n        } else {\r\n            manageError(false)\r\n        }\r\n\r\n        //ID\r\n        agenda.id = shortid()\r\n\r\n        //Create event\r\n        crearLista(agenda)\r\n\r\n        //Reset form\r\n        manageEvent({\r\n            evento: '',\r\n            fecha: '',\r\n            hora: '',\r\n            detalles: ''\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className=\"form-all\">\r\n            <h2 className=\"text-center mb-lg\">Crear evento</h2>\r\n\r\n            { error ? <p className=\"error-promt\">No debe haber campos vacíos.</p> : null}\r\n\r\n            <form>\r\n                <label>Nombre del evento</label>\r\n                <input \r\n                    type=\"text\"\r\n                    name=\"evento\"\r\n                    className=\"field-lg field-form mb-sm\"\r\n                    onChange={handleChange}\r\n                    value={evento}\r\n                />\r\n                \r\n                <div className=\"together\">\r\n                    <label className=\"mr-sm\">Fecha</label>\r\n                    <input \r\n                        type=\"date\"\r\n                        name=\"fecha\"\r\n                        className=\"field-form field-lg mr-sm mb-sm\"\r\n                        onChange={handleChange}\r\n                        value={fecha}\r\n                    />\r\n\r\n                    <label className=\"mr-sm\">Hora</label>\r\n                    <input \r\n                        type=\"time\"\r\n                        name=\"hora\"\r\n                        className=\"field-form field-lg mb-sm\"\r\n                        onChange={handleChange}\r\n                        value={hora}\r\n                    />\r\n                </div>\r\n\r\n                <label>Detalles del evento</label>\r\n                <textarea\r\n                    className=\"field-lg field-form mb-sm\"\r\n                    name=\"detalles\"\r\n                    onChange={handleChange}\r\n                    value={detalles}\r\n                ></textarea>\r\n\r\n                <button\r\n                    type=\"submit\"\r\n                    className=\"text-center btn\"\r\n                    onClick={submitEvent}\r\n                >Guardar</button>\r\n                \r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default Form;","import React from 'react'\r\n\r\nconst Lista = ({lista, eliminarEvento}) => (\r\n    <div className=\"lista\">\r\n        <p>Nombre del evento: <span>{lista.evento}</span></p>\r\n        <p>Fecha: <span>{lista.fecha}</span></p>\r\n        <p>Hora: <span>{lista.hora}</span></p>\r\n        <p>Detalles: <span>{lista.detalles}</span></p>\r\n\r\n        <button\r\n            className=\"btn\"\r\n            onClick={() => eliminarEvento(lista.id)}\r\n        >Eliminar &times;</button>\r\n    </div>\r\n)\r\n \r\nexport default Lista;","import React, {useState} from 'react';\r\nimport Form from './Form'\r\nimport Lista from './Lista'\r\n\r\nconst Content = () => {\r\n\r\n    const [listas, crearListas] = useState([])\r\n\r\n    const crearLista = lista => {\r\n      crearListas([...listas, lista])\r\n    }\r\n\r\n    const estado = listas.length === 0 ? 'No hay ningún evento' : 'Administración de eventos';\r\n\r\n    const eliminarEvento = id => {\r\n      const removerEvento = listas.filter(lista => lista.id !== id)\r\n      crearListas(removerEvento)\r\n    }\r\n\r\n    return ( \r\n        <div className=\"inside\">\r\n          <Form\r\n            crearLista={crearLista}\r\n          />\r\n          <div className=\"form-all\">\r\n            <h2 className=\"text-center mb-lg\">{estado}</h2>\r\n            {listas.map(lista => (\r\n                <Lista\r\n                    key={lista.id}\r\n                    lista={lista}\r\n                    eliminarEvento={eliminarEvento}\r\n                />\r\n            ))}\r\n          </div>\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default Content;","import React from 'react'\nimport Content from './components/Content'\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n        <h1>Agenda</h1>\n        <Content/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}